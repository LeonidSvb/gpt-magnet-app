---
description: Architectural Decision Records
globs:
alwaysApply: false
---

# Architecture Decision Log

<!--
ADR_AGENT_PROTOCOL v1.0

You (the agent) manage this file as the single source of truth for all ADRs.

INVARIANTS
- Keep this exact file structure and headings.
- All ADR entries use H2 headings: "## ADR-XXXX — <Title>" (4-digit zero-padded ID).
- Allowed Status values: Proposed | Accepted | Superseded
- Date format: YYYY-MM-DD
- New entries must be appended to the END of the file.
- The Index table between the INDEX markers must always reflect the latest state and be sorted by ID desc (newest on top).
- Each ADR MUST contain: Date, Status, Owner, Context, Decision, Consequences.
- Each ADR must include an explicit anchor `<a id="adr-XXXX"></a>` so links remain stable.

HOW TO ADD A NEW ADR
1) Read the whole file.
2) Compute next ID:
   - Scan for headings matching: ^## ADR-(\\d{4}) — .+$
   - next_id = (max captured number) + 1, left-pad to 4 digits.
3) Create a new ADR section using the "New ADR Entry Template" below.
   - Place it AFTER the last ADR section in the file.
   - Add an `<a id="adr-XXXX"></a>` line immediately below the heading.
4) Update the Index (between the INDEX markers):
   - Insert/replace the row for this ADR keeping the table sorted by ID descending.
   - Title in the Index MUST link to the anchor: [<Title>](#adr-XXXX)
   - If this ADR supersedes another: set "Supersedes" in this row, and update that older ADR:
       a) Change its Status to "Superseded"
       b) Add "Superseded by: ADR-XXXX" in its Consequences block
       c) Update the older ADR's Index row "Superseded by" column to ADR-XXXX
5) Validate before saving:
   - Exactly one heading exists for ADR-XXXX
   - All required fields are present and non-empty
   - Index contains a row for ADR-XXXX and remains properly sorted
6) Concurrency resolution:
   - If a merge conflict or duplicate ID is detected after reading: recompute next_id from the current file state, rename your heading, anchor, and Index row accordingly, and retry once.

COMMIT MESSAGE SUGGESTION
- "ADR-XXXX: <Short Title> — <Status>"

END ADR_AGENT_PROTOCOL
-->

## Index

<!-- BEGIN:ADR_INDEX -->

| ID   | Title                                                        | Date       | Status   | Supersedes | Superseded by |
| ---- | ------------------------------------------------------------ | ---------- | -------- | ---------- | ------------- |
| 0007 | [GoHighLevel Field Mapping Critical Fix](#adr-0007)         | 2025-09-07 | Accepted | —          | —             |
| 0006 | [Email Gate Redesign to Inline Form](#adr-0006)             | 2025-09-07 | Accepted | —          | —             |
| 0005 | [GoHighLevel CRM Integration with Structured Field Mapping](#adr-0005) | 2025-09-06 | Accepted | —          | —             |
| 0004 | [Airtable Expert Directory with Tag-Based Matching](#adr-0004) | 2025-09-06 | Accepted | —          | —             |
| 0003 | [OpenAI Trip Guide Generation with Alfie Personality](#adr-0003) | 2025-09-06 | Accepted | —          | —             |
| 0002 | [Next.js Widget Architecture for Webflow Embedding](#adr-0002) | 2025-09-06 | Accepted | —          | —             |
| 0001 | [Embeddable TripGuide Widget MVP Architecture](#adr-0001)    | 2025-09-06 | Accepted | —          | —             |

<!-- END:ADR_INDEX -->

---

## New ADR Entry Template (copy for each new decision)

> Replace placeholders, keep section headers. Keep prose concise.

```

## ADR-XXXX — \<Short, specific title>

<a id="adr-XXXX"></a>
**Date**: YYYY-MM-DD
**Status**: Proposed | Accepted | Superseded
**Owner**: <Name>

### Context

<1–3 sentences: what changed or what forces drive this decision now>

### Alternatives

<Quick bullet list of alternatives considered, and why they were rejected.>

### Decision

\<Single clear decision in active voice; make it testable/verifiable>

### Consequences

* **Pros**: \<benefit 1>, \<benefit 2>
* **Cons / risks**: \<cost 1>, \<risk 1>
* **Supersedes**: ADR-NNNN (if any)
* **Superseded by**: ADR-MMMM (filled later if replaced)

### (Optional) Compliance / Verification

\<How we'll check this is honored: tests, checks, fitness functions, runbooks>

```

---

## ADR-0001 — Embeddable TripGuide Widget MVP Architecture

<a id="adr-0001"></a>
**Date**: 2025-09-06  
**Status**: Accepted  
**Owner**: Development Team

### Context

Outdoorable needs an embeddable widget for Webflow that generates personalized trip guides for outdoor travelers. The widget must support two user flows ("Inspire Me" and "I Know Where to Go"), integrate with external APIs, and drive conversions through email collection and expert matching.

### Alternatives

- **Standalone web app**: Full website but harder to embed and distribute
- **WordPress plugin**: Limited to WordPress sites, smaller reach
- **React component library**: Too technical for non-developer users
- **Embeddable Next.js widget**: Easy to embed, self-contained, responsive

### Decision

Build an embeddable Next.js widget that can be integrated into Webflow sites via iframe. The widget will be self-contained with its own API routes, responsive design, and minimal dependencies to avoid conflicts with host pages.

### Consequences

- **Pros**: Easy integration for customers, responsive design, isolated from host page styles, scalable architecture
- **Cons / risks**: Iframe limitations, requires proper CSP configuration, additional complexity for embedding
- **Supersedes**: —
- **Superseded by**: —

### Compliance / Verification

Widget successfully embeds in test Webflow sites without console errors. All functionality works within iframe constraints. Mobile responsive design validated on devices 375px and wider.

---

## ADR-0002 — Next.js Widget Architecture for Webflow Embedding

<a id="adr-0002"></a>
**Date**: 2025-09-06  
**Status**: Accepted  
**Owner**: Development Team

### Context

The embeddable widget needs a robust frontend framework that supports server-side rendering, API routes, and optimized build output for fast loading in embedded contexts.

### Alternatives

- **Plain React SPA**: Simpler but lacks SSR and integrated API routes
- **Vue.js with Nuxt**: Good framework but team expertise is in React
- **Svelte/SvelteKit**: Smaller bundle size but less ecosystem support
- **Next.js with App Router**: Full-stack React framework with optimized embedding features

### Decision

Use Next.js 14 with App Router, deployed on Vercel. Configure with Tailwind CSS using 'tw-' prefix to avoid styling conflicts. Implement dedicated /embed route for iframe-optimized rendering.

### Consequences

- **Pros**: Server-side rendering, built-in API routes, optimized build output, excellent Vercel integration, familiar React patterns
- **Cons / risks**: Larger bundle size than minimal frameworks, requires Next.js expertise
- **Supersedes**: —
- **Superseded by**: —

### Compliance / Verification

Bundle size remains under 500KB gzipped. Embed route loads in under 3 seconds. Tailwind prefix prevents styling conflicts with host pages.

---

## ADR-0003 — OpenAI Trip Guide Generation with Alfie Personality

<a id="adr-0003"></a>
**Date**: 2025-09-06  
**Status**: Accepted  
**Owner**: Development Team

### Context

Trip guide generation is the core value proposition. Content must feel personalized, high-quality, and consistent with the Outdoorable brand personality (Alfie the fox). Different prompts are needed for "Inspire Me" vs "I Know Where to Go" flows.

### Alternatives

- **Template-based generation**: Faster but less personalized and engaging
- **Multiple AI providers**: More resilience but increased complexity
- **Human-written content**: Higher quality but not scalable
- **OpenAI with structured prompts**: Scalable, personalized, brand-consistent

### Decision

Use OpenAI GPT-4 with structured prompts that embed Alfie's personality and brand voice. Implement separate prompt templates for each flow type, with example outputs to ensure consistent quality and tone.

### Consequences

- **Pros**: Highly personalized content, consistent brand voice, scalable generation, excellent output quality
- **Cons / risks**: OpenAI API costs, rate limiting, dependency on external service
- **Supersedes**: —
- **Superseded by**: —

### Compliance / Verification

Generated content matches Alfie personality guidelines. Trip guides follow structured format from example outputs. API response times under 30 seconds. Cost per generation monitored and optimized.

---

## ADR-0004 — Airtable Expert Directory with Tag-Based Matching

<a id="adr-0004"></a>
**Date**: 2025-09-06  
**Status**: Accepted  
**Owner**: Development Team

### Context

Expert matching drives business value by connecting users with travel experts. The system needs to store expert profiles and match them to users based on their questionnaire responses and trip preferences.

### Alternatives

- **Database with custom matching logic**: Full control but requires complex development
- **Third-party matching services**: Specialized but expensive and limited customization
- **Manual expert assignment**: Not scalable for MVP
- **Airtable + OpenAI tagging**: Flexible expert management with intelligent automated matching

### Decision

Use Airtable as expert directory with OpenAI-generated tags from user questionnaires to match experts. Store expert profiles with tags, specialties, and contact information in Airtable. Generate user tags from questionnaire responses and find best-matching expert.

### Consequences

- **Pros**: Easy expert profile management, flexible matching logic, no database setup required, OpenAI provides intelligent tagging
- **Cons / risks**: Airtable API rate limits, dependency on external service, matching algorithm needs tuning
- **Supersedes**: —
- **Superseded by**: —

### Compliance / Verification

Expert matching returns relevant matches based on user preferences. Airtable integration successfully queries expert profiles. Matching algorithm provides reasonable match scores (>0.7 for good matches).

---

## ADR-0005 — GoHighLevel CRM Integration with Structured Field Mapping

<a id="adr-0005"></a>
**Date**: 2025-09-06  
**Status**: Accepted  
**Owner**: Development Team

### Context

GoHighLevel CRM is the single source of truth for user data and leads. The widget must collect email addresses and questionnaire responses, then structure this data into specific GoHighLevel fields for the client's workflow and follow-up processes.

### Alternatives

- **Generic contact creation**: Simple but loses valuable questionnaire data
- **Custom field mapping**: Flexible but requires GoHighLevel configuration
- **Third-party CRM integration**: More options but client already uses GoHighLevel
- **Structured field mapping with predefined schema**: Maintains data structure for client workflows

### Decision

Implement structured GoHighLevel integration with specific field mapping:
- planning_stage (Inspire Me vs I Know Where)
- place_of_interest (destination preferences)  
- traveler_type (solo/couple/group)
- activity_level (low/moderate/high intensity)
- activity_preferences (selected activities)
- guided_preferences (independent vs guided)
- travel_budget (budget range)
- travel_dates (season/dates)
- full_survey_data (complete JSON backup)

### Consequences

- **Pros**: Preserves all user data, enables client follow-up workflows, structured for analysis, full data backup in JSON
- **Cons / risks**: GoHighLevel API dependency, requires field configuration, more complex integration
- **Supersedes**: —
- **Superseded by**: —

### Compliance / Verification

All questionnaire data successfully maps to GoHighLevel fields. Email collection triggers contact creation. JSON backup contains complete user responses. Integration handles API errors gracefully.

---

## ADR-0006 — Email Gate Redesign to Inline Form

<a id="adr-0006"></a>
**Date**: 2025-09-07  
**Status**: Accepted  
**Owner**: Development Team

### Context

The previous email collection system used a popup modal that appeared immediately after content generation, which was intrusive and annoying to users. The trigger occurred too early (at 50px scroll) and had complex state management with multiple conflicting components.

### Alternatives

- **Modifying existing popup**: Rejected due to architectural complexity
- **Different scroll thresholds**: 30% chosen as optimal engagement point  
- **Different form positions**: Centered overlay chosen for maximum visibility
- **Complete redesign to inline form**: Selected for better user experience

### Decision

Completely redesign email collection architecture from popup-based to inline-based system:
- Create `InlineEmailGate` component replacing `EmailGate` popup
- Modify `TripGuideDisplay` to use inline form instead of popup
- Change scroll threshold from `50px` to `30%` of content
- Form appears/disappears based on scroll position with real-time tracking
- Simplified state management with separate boolean states instead of complex object
- Minimalistic UI with Name + Email fields, "Unlock" button, subtle backdrop blur
- Brief "Thank you" message for 1.5 seconds post-submission

### Consequences

- **Pros**: Non-intrusive inline form, appears at optimal engagement point (30%), disappears when user scrolls back, minimal visual disruption, simplified state management, cleaner component architecture, maintained CRM integration
- **Cons / risks**: Form positioning complexity, requires proper z-index management
- **Supersedes**: Previous popup email gate system
- **Superseded by**: —

### Compliance / Verification

- [x] Inline form appears at 30% scroll
- [x] Form disappears when scrolling back  
- [x] Email validation works
- [x] GoHighLevel CRM integration functional
- [x] Mobile responsive design
- [x] Session storage persistence
- [x] Thank you message displays properly

---

## ADR-0007 — GoHighLevel Field Mapping Critical Fix

<a id="adr-0007"></a>
**Date**: 2025-09-07  
**Status**: Accepted  
**Owner**: Development Team

### Context

The GoHighLevel CRM integration was failing to populate all required custom fields due to incorrect field name mappings in the API integration. Some contacts had empty fields in the CRM, making it difficult for sales follow-up and data analysis.

### Alternatives

- **Generic field mapping**: Keep using fallback field names but inconsistent data
- **Manual field correction**: Time-consuming and doesn't solve root cause
- **Flow-specific field mapping**: Map to correct questionnaire fields based on user flow type
- **Complete field validation**: Ensure all 9 fields always have meaningful values

### Decision

Implement flow-aware field mapping with guaranteed field population:
1. **Flow-Specific Logic**: Different field mappings for "inspire-me" vs "i-know-where" flows
2. **Correct Field Names**: Map to actual questionnaire field names from randomAnswers.json
3. **Fallback Values**: Use `ensureValue()` function to prevent empty fields with meaningful defaults
4. **Enhanced Logging**: Add detailed field mapping logs for debugging and validation

### Consequences

- **Pros**: All 9 GoHighLevel fields guaranteed populated, flow-specific accurate data mapping, meaningful fallback values, enhanced debugging capabilities
- **Cons / risks**: More complex mapping logic, requires maintenance if questionnaire structure changes
- **Supersedes**: Previous generic field mapping approach
- **Superseded by**: —

### Compliance / Verification

- [x] All 9 fields populate with meaningful data: planning_stage, place_of_interest, traveler_type, activity_level, activity_preferences, guided_preferences, travel_budget, travel_dates, full_survey_data
- [x] Flow-specific field mapping works for both inspire-me and i-know-where
- [x] Fallback values prevent empty fields
- [x] Enhanced logging provides field mapping visibility
- [x] Validated with contact IDs: H3m5d38e2YJPLS9gaHDB, BJSodsLT9acbZnzgmlD6, 5zkdvxZfLkHuimqotPTY

---